'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var t = _ref.types,
      template = _ref.template;

  var mergeStylesFunctionTemplate = template('\nfunction _mergeStyles() {\n  var newTarget = {};\n\n  for (var index = 0; index < arguments.length; index++) {\n    var target = arguments[index];\n\n    for (var key in target) {\n      newTarget[key] = Object.assign(newTarget[key] || {}, target[key]);\n    }\n  }\n\n  return newTarget;\n}\n  ');
  var mergeStylesFunctionAst = mergeStylesFunctionTemplate();

  function getArrayExpression() {
    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : str.trim();

    if (str === '') {
      return [];
    }

    return str.split(/\s+/).map(function (className) {
      return template(STYLE_SHEET_NAME + '["' + className + '"]')().expression;
    });
  }

  function findLastImportIndex(body) {
    var bodyReverse = body.slice(0).reverse();
    var _index = 0;

    bodyReverse.some(function (node, index) {
      if (node.type === 'ImportDeclaration') {
        _index = body.length - index - 1;
        return true;
      }
      return false;
    });

    return _index;
  }

  return {
    visitor: {
      Program: {
        exit: function exit(_ref2, _ref3) {
          var node = _ref2.node;
          var file = _ref3.file;

          var cssFileCount = file.get('cssFileCount');
          var lastImportIndex = findLastImportIndex(node.body);
          var cssParamIdentifiers = file.get('cssParamIdentifiers');
          var callExpression = void 0;

          if (cssParamIdentifiers) {
            // only one css file
            if (cssParamIdentifiers.length === 1) {
              callExpression = t.variableDeclaration('var', [t.variableDeclarator(t.identifier(STYLE_SHEET_NAME), cssParamIdentifiers[0])]);
            } else if (cssParamIdentifiers.length > 1) {
              var objectAssignExpression = t.callExpression(t.identifier('_mergeStyles'), cssParamIdentifiers);
              callExpression = t.variableDeclaration('var', [t.variableDeclarator(t.identifier(STYLE_SHEET_NAME), objectAssignExpression)]);
            }

            node.body.splice(lastImportIndex + 1, 0, callExpression);
          }

          if (cssFileCount > 1) {
            node.body.unshift(mergeStylesFunctionAst);
          }
        }
      },
      JSXOpeningElement: function JSXOpeningElement(_ref4, _ref5) {
        var container = _ref4.container;
        var file = _ref5.file;

        var cssFileCount = file.get('cssFileCount') || 0;
        if (cssFileCount < 1) {
          return;
        }

        // Check if has "style"
        var hasStyleAttribute = false;
        var styleAttribute = void 0;
        var hasClassName = false;
        var classNameAttribute = void 0;

        var attributes = container.openingElement.attributes;
        for (var i = 0; i < attributes.length; i++) {
          var name = attributes[i].name;
          if (name) {
            if (!hasStyleAttribute) {
              hasStyleAttribute = name.name === 'style';
              styleAttribute = hasStyleAttribute && attributes[i];
            }

            if (!hasClassName) {
              hasClassName = name.name === 'className';
              classNameAttribute = hasClassName && attributes[i];
            }
          }
        }

        if (hasClassName) {
          // Remove origin className
          attributes.splice(attributes.indexOf(classNameAttribute), 1);

          var arrayExpression = getArrayExpression(classNameAttribute.value.value);

          if (arrayExpression.length === 0) {
            return;
          }

          if (hasStyleAttribute) {
            var expression = styleAttribute.value.expression;
            var expressionType = expression.type;

            // style={[styles.a, styles.b]}
            if (expressionType === 'ArrayExpression') {
              expression.elements = arrayExpression.concat(expression.elements);
              // style={{styles.a}} or style={{ height: 100 }}
            } else if (expressionType === 'MemberExpression' || expressionType === 'ObjectExpression') {
              styleAttribute.value.expression = t.arrayExpression(arrayExpression.concat(expression));
            }
          } else {
            var _expression = arrayExpression.length === 1 ? arrayExpression[0] : t.arrayExpression(arrayExpression);
            attributes.push(t.jSXAttribute(t.jSXIdentifier('style'), t.jSXExpressionContainer(_expression)));
          }
        }
      },
      ImportDeclaration: function ImportDeclaration(_ref6, _ref7) {
        var node = _ref6.node;
        var file = _ref7.file;

        var sourceValue = node.source.value;
        var extname = _path2.default.extname(sourceValue);
        var cssIndex = cssSuffixs.indexOf(extname);
        // Do not convert `import styles from './foo.css'` kind
        if (node.importKind !== 'value' && cssIndex > -1) {
          var cssFileCount = file.get('cssFileCount') || 0;
          var cssParamIdentifiers = file.get('cssParamIdentifiers') || [];
          var cssFileBaseName = (0, _camelcase2.default)(_path2.default.basename(sourceValue, extname));
          var styleSheetIdentifier = t.identifier('' + (cssFileBaseName + NAME_SUFFIX));

          node.specifiers = [t.importDefaultSpecifier(styleSheetIdentifier)];
          cssParamIdentifiers.push(styleSheetIdentifier);
          cssFileCount++;

          file.set('cssParamIdentifiers', cssParamIdentifiers);
          file.set('cssFileCount', cssFileCount);
        }
      }
    }
  };
};

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _camelcase = require('camelcase');

var _camelcase2 = _interopRequireDefault(_camelcase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STYLE_SHEET_NAME = '_styleSheet';
var NAME_SUFFIX = 'StyleSheet';
var cssSuffixs = ['.css', '.scss', '.sass', '.less'];

;
module.exports = exports['default'];