/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BasicEvaluatedExpression = function () {
  function BasicEvaluatedExpression() {
    _classCallCheck(this, BasicEvaluatedExpression);

    this.range = null;
  }

  _createClass(BasicEvaluatedExpression, [{
    key: 'isNull',
    value: function isNull() {
      return !!this.null;
    }
  }, {
    key: 'isString',
    value: function isString() {
      return Object.prototype.hasOwnProperty.call(this, 'string');
    }
  }, {
    key: 'isNumber',
    value: function isNumber() {
      return Object.prototype.hasOwnProperty.call(this, 'number');
    }
  }, {
    key: 'isBoolean',
    value: function isBoolean() {
      return Object.prototype.hasOwnProperty.call(this, 'bool');
    }
  }, {
    key: 'isRegExp',
    value: function isRegExp() {
      return Object.prototype.hasOwnProperty.call(this, 'regExp');
    }
  }, {
    key: 'isConditional',
    value: function isConditional() {
      return Object.prototype.hasOwnProperty.call(this, 'options');
    }
  }, {
    key: 'isArray',
    value: function isArray() {
      return Object.prototype.hasOwnProperty.call(this, 'items');
    }
  }, {
    key: 'isConstArray',
    value: function isConstArray() {
      return Object.prototype.hasOwnProperty.call(this, 'array');
    }
  }, {
    key: 'isIdentifier',
    value: function isIdentifier() {
      return Object.prototype.hasOwnProperty.call(this, 'identifier');
    }
  }, {
    key: 'isWrapped',
    value: function isWrapped() {
      return Object.prototype.hasOwnProperty.call(this, 'prefix') || Object.prototype.hasOwnProperty.call(this, 'postfix');
    }
  }, {
    key: 'isTemplateString',
    value: function isTemplateString() {
      return Object.prototype.hasOwnProperty.call(this, 'quasis');
    }
  }, {
    key: 'asBool',
    value: function asBool() {
      if (this.isBoolean()) return this.bool;else if (this.isNull()) return false;else if (this.isString()) return !!this.string;else if (this.isNumber()) return !!this.number;else if (this.isRegExp()) return true;else if (this.isArray()) return true;else if (this.isConstArray()) return true;else if (this.isWrapped()) return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;else if (this.isTemplateString()) {
        if (this.quasis.length === 1) return this.quasis[0].asBool();
        for (var i = 0; i < this.quasis.length; i++) {
          if (this.quasis[i].asBool()) return true;
        }
        // can't tell if string will be empty without executing
      }
      return undefined;
    }
  }, {
    key: 'setString',
    value: function setString(str) {
      if (str === null) delete this.string;else this.string = str;
      return this;
    }
  }, {
    key: 'setNull',
    value: function setNull() {
      this.null = true;
      return this;
    }
  }, {
    key: 'setNumber',
    value: function setNumber(num) {
      if (num === null) delete this.number;else this.number = num;
      return this;
    }
  }, {
    key: 'setBoolean',
    value: function setBoolean(bool) {
      if (bool === null) delete this.bool;else this.bool = bool;
      return this;
    }
  }, {
    key: 'setRegExp',
    value: function setRegExp(regExp) {
      if (regExp === null) delete this.regExp;else this.regExp = regExp;
      return this;
    }
  }, {
    key: 'setIdentifier',
    value: function setIdentifier(identifier) {
      if (identifier === null) delete this.identifier;else this.identifier = identifier;
      return this;
    }
  }, {
    key: 'setWrapped',
    value: function setWrapped(prefix, postfix) {
      this.prefix = prefix;
      this.postfix = postfix;
      return this;
    }
  }, {
    key: 'unsetWrapped',
    value: function unsetWrapped() {
      delete this.prefix;
      delete this.postfix;
      return this;
    }
  }, {
    key: 'setOptions',
    value: function setOptions(options) {
      if (options === null) delete this.options;else this.options = options;
      return this;
    }
  }, {
    key: 'setItems',
    value: function setItems(items) {
      if (items === null) delete this.items;else this.items = items;
      return this;
    }
  }, {
    key: 'setArray',
    value: function setArray(array) {
      if (array === null) delete this.array;else this.array = array;
      return this;
    }
  }, {
    key: 'setTemplateString',
    value: function setTemplateString(quasis) {
      if (quasis === null) delete this.quasis;else this.quasis = quasis;
      return this;
    }
  }, {
    key: 'addOptions',
    value: function addOptions(options) {
      var _this = this;

      if (!this.options) this.options = [];
      options.forEach(function (item) {
        _this.options.push(item);
      }, this);
      return this;
    }
  }, {
    key: 'setRange',
    value: function setRange(range) {
      this.range = range;
      return this;
    }
  }]);

  return BasicEvaluatedExpression;
}();

module.exports = BasicEvaluatedExpression;