/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var compareLocations = require('./compareLocations');

var Dependency = function () {
  function Dependency() {
    _classCallCheck(this, Dependency);

    this.module = null;
  }

  _createClass(Dependency, [{
    key: 'isEqualResource',
    value: function isEqualResource() {
      return false;
    }

    // Returns the referenced module and export

  }, {
    key: 'getReference',
    value: function getReference() {
      if (!this.module) return null;
      return {
        module: this.module,
        importedNames: true // true: full object, false: only sideeffects/no export, array of strings: the exports with this names
      };
    }

    // Returns the exported names

  }, {
    key: 'getExports',
    value: function getExports() {
      return null;
    }
  }, {
    key: 'getWarnings',
    value: function getWarnings() {
      return null;
    }
  }, {
    key: 'getErrors',
    value: function getErrors() {
      return null;
    }
  }, {
    key: 'updateHash',
    value: function updateHash(hash) {
      hash.update((this.module && this.module.id) + '');
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      this.module = null;
    }

    // TODO: remove in webpack 3

  }, {
    key: 'compare',
    value: function compare(a, b) {
      return compareLocations(a.loc, b.loc);
    }
  }]);

  return Dependency;
}();

Dependency.compare = function (a, b) {
  return compareLocations(a.loc, b.loc);
};

module.exports = Dependency;