/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Template = require('./Template');

var JsonpMainTemplatePlugin = function () {
  function JsonpMainTemplatePlugin() {
    _classCallCheck(this, JsonpMainTemplatePlugin);
  }

  _createClass(JsonpMainTemplatePlugin, [{
    key: 'apply',
    value: function apply(mainTemplate) {
      mainTemplate.plugin('rax-hot-bootstrap', function (source, chunk, hash) {
        var _this = this;

        var hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
        var hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
        var hotUpdateFunction = this.outputOptions.hotUpdateFunction;
        var currentHotUpdateChunkFilename = this.applyPluginsWaterfall('asset-path', JSON.stringify(hotUpdateChunkFilename), {
          hash: '" + ' + this.renderCurrentHashCode(hash) + ' + "',
          hashWithLength: function hashWithLength(length) {
            return '" + ' + _this.renderCurrentHashCode(hash, length) + ' + "';
          },
          chunk: {
            id: '" + chunkId + "'
          }
        });
        var currentHotUpdateMainFilename = this.applyPluginsWaterfall('asset-path', JSON.stringify(hotUpdateMainFilename), {
          hash: '" + ' + this.renderCurrentHashCode(hash) + ' + "',
          hashWithLength: function hashWithLength(length) {
            return '" + ' + _this.renderCurrentHashCode(hash, length) + ' + "';
          }
        });
        var runtimeSource = Template.getFunctionContent(require('./RaxJsonpMainTemplate.runtime.js')).replace(/\/\/\$semicolon/g, ';').replace(/\$require\$/g, this.requireFn).replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename).replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename).replace(/\$hash\$/g, JSON.stringify(hash));
        return source + '\nfunction hotDisposeChunk(chunkId) {\n  delete installedChunks[chunkId];\n}\nvar parentHotUpdateCallback = global[' + JSON.stringify(hotUpdateFunction) + '];\nglobal[' + JSON.stringify(hotUpdateFunction) + '] = ' + runtimeSource;
      });
      mainTemplate.plugin('hash', function (hash) {
        hash.update('jsonp');
        hash.update('4');
        hash.update('' + this.outputOptions.filename);
        hash.update('' + this.outputOptions.chunkFilename);
        hash.update('' + this.outputOptions.jsonpFunction);
        hash.update('' + this.outputOptions.hotUpdateFunction);
      });
    }
  }]);

  return JsonpMainTemplatePlugin;
}();

module.exports = JsonpMainTemplatePlugin;