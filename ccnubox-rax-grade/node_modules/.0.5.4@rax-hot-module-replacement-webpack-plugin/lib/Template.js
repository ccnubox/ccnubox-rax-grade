/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tapable = require('tapable');
var ConcatSource = require('webpack-sources').ConcatSource;

var START_LOWERCASE_ALPHABET_CODE = 'a'.charCodeAt(0);
var START_UPPERCASE_ALPHABET_CODE = 'A'.charCodeAt(0);
var DELTA_A_TO_Z = 'z'.charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;

module.exports = function (_Tapable) {
  _inherits(Template, _Tapable);

  function Template(outputOptions) {
    _classCallCheck(this, Template);

    var _this = _possibleConstructorReturn(this, (Template.__proto__ || Object.getPrototypeOf(Template)).call(this));

    _this.outputOptions = outputOptions || {};
    return _this;
  }

  _createClass(Template, [{
    key: 'indent',
    value: function indent(str) {
      if (Array.isArray(str)) {
        return str.map(this.indent.bind(this)).join('\n');
      } else {
        str = str.trimRight();
        if (!str) return '';
        var ind = str[0] === '\n' ? '' : '\t';
        return ind + str.replace(/\n([^\n])/g, '\n\t$1');
      }
    }
  }, {
    key: 'prefix',
    value: function prefix(str, _prefix) {
      if (Array.isArray(str)) {
        str = str.join('\n');
      }
      str = str.trim();
      if (!str) return '';
      var ind = str[0] === '\n' ? '' : _prefix;
      return ind + str.replace(/\n([^\n])/g, '\n' + _prefix + '$1');
    }
  }, {
    key: 'asString',
    value: function asString(str) {
      if (Array.isArray(str)) {
        return str.join('\n');
      }
      return str;
    }
  }, {
    key: 'getModulesArrayBounds',
    value: function getModulesArrayBounds(modules) {
      if (!modules.every(moduleIdIsNumber)) return false;
      var maxId = -Infinity;
      var minId = Infinity;
      modules.forEach(function (module) {
        if (maxId < module.id) maxId = module.id;
        if (minId > module.id) minId = module.id;
      });
      if (minId < 16 + ('' + minId).length) {
        // add minId x ',' instead of 'Array(minId).concat(...)'
        minId = 0;
      }
      var objectOverhead = modules.map(function (module) {
        var idLength = (module.id + '').length;
        return idLength + 2;
      }).reduce(function (a, b) {
        return a + b;
      }, -1);
      var arrayOverhead = minId === 0 ? maxId : 16 + ('' + minId).length + maxId;
      return arrayOverhead < objectOverhead ? [minId, maxId] : false;
    }
  }, {
    key: 'renderChunkModules',
    value: function renderChunkModules(chunk, moduleTemplate, dependencyTemplates, prefix) {
      if (!prefix) prefix = '';
      var source = new ConcatSource();
      if (chunk.modules.length === 0) {
        source.add('[]');
        return source;
      }
      var removedModules = chunk.removedModules;
      var allModules = chunk.modules.map(function (module) {
        return {
          id: module.id,
          source: moduleTemplate.render(module, dependencyTemplates, chunk)
        };
      });
      if (removedModules && removedModules.length > 0) {
        removedModules.forEach(function (id) {
          allModules.push({
            id: id,
            source: 'false'
          });
        });
      }
      var bounds = this.getModulesArrayBounds(chunk.modules);

      if (bounds) {
        // Render a spare array
        var minId = bounds[0];
        var maxId = bounds[1];
        if (minId !== 0) source.add('Array(' + minId + ').concat(');
        source.add('[\n');
        var modules = {};
        allModules.forEach(function (module) {
          modules[module.id] = module;
        });
        for (var idx = minId; idx <= maxId; idx++) {
          var module = modules[idx];
          if (idx !== minId) source.add(',\n');
          source.add('/* ' + idx + ' */');
          if (module) {
            source.add('\n');
            source.add(module.source);
          }
        }
        source.add('\n' + prefix + ']');
        if (minId !== 0) source.add(')');
      } else {
        // Render an object
        source.add('{\n');
        allModules.sort(function (a, b) {
          var aId = a.id + '';
          var bId = b.id + '';
          if (aId < bId) return -1;
          if (aId > bId) return 1;
          return 0;
        }).forEach(function (module, idx) {
          if (idx !== 0) source.add(',\n');
          source.add('\n/***/ ' + JSON.stringify(module.id) + ':\n');
          source.add(module.source);
        });
        source.add('\n\n' + prefix + '}');
      }
      return source;
    }
  }], [{
    key: 'getFunctionContent',
    value: function getFunctionContent(fn) {
      return fn.toString().replace(/^function\s?\(\)\s?\{\n?|\n?\}$/g, '').replace(/^\t/mg, '');
    }
  }, {
    key: 'toIdentifier',
    value: function toIdentifier(str) {
      if (typeof str !== 'string') return '';
      return str.replace(/^[^a-zA-Z$_]/, '_').replace(/[^a-zA-Z0-9$_]/g, '_');
    }
  }, {
    key: 'toPath',
    value: function toPath(str) {
      if (typeof str !== 'string') return '';
      return str.replace(/[^a-zA-Z0-9_!§$()=\-\^°]+/g, '-').replace(/^-|-$/, '');
    }

    // map number to a single character a-z, A-Z or <_ + number> if number is too big

  }, {
    key: 'numberToIdentifer',
    value: function numberToIdentifer(n) {
      // lower case
      if (n < DELTA_A_TO_Z) return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);

      // upper case
      n -= DELTA_A_TO_Z;
      if (n < DELTA_A_TO_Z) return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);

      // fall back to _ + number
      n -= DELTA_A_TO_Z;
      return '_' + n;
    }
  }]);

  return Template;
}(Tapable);

function moduleIdIsNumber(module) {
  return typeof module.id === 'number';
}