/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebpackError = require('./WebpackError');

var UnsupportedFeatureWarning = function (_WebpackError) {
  _inherits(UnsupportedFeatureWarning, _WebpackError);

  function UnsupportedFeatureWarning(module, message) {
    _classCallCheck(this, UnsupportedFeatureWarning);

    var _this = _possibleConstructorReturn(this, (UnsupportedFeatureWarning.__proto__ || Object.getPrototypeOf(UnsupportedFeatureWarning)).call(this));

    _this.name = 'UnsupportedFeatureWarning';
    _this.message = message;
    _this.origin = _this.module = module;

    Error.captureStackTrace(_this, _this.constructor);
    return _this;
  }

  return UnsupportedFeatureWarning;
}(WebpackError);

module.exports = UnsupportedFeatureWarning;