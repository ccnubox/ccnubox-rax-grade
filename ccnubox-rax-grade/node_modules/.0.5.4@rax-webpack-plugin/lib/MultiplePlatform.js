'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Convert single config to multiple platform configs into webpack MultipleCompiler
                                                                                                                                                                                                                                                                               * Added platform-loader to module.preLoader
                                                                                                                                                                                                                                                                               */

var _lodash = require('lodash.clonedeep');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var platformLoader = require.resolve('./PlatformLoader');

module.exports = function MultiplePlatform(config) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (Object.prototype.toString.call(config) !== '[object Object]') {
    throw new TypeError('Invalid argument: config, must be an object');
  }

  if (Object.prototype.toString.call(options) !== '[object Object]') {
    throw new TypeError('Invalid argument: options, must be an object');
  }

  var platforms = options.platforms || config.platforms;

  if (typeof platforms === 'undefined' || platforms.length === 0) {
    console.log('');
    console.warn('The \`platforms\` field is not specified!');
    console.log('');
    return config;
  }

  var platformWihteList = ['web', 'node', 'weex', 'reactnative'];

  // filter platforms by platformWihteList
  platforms = platforms.filter(function (platform) {
    var p = platform.toLowerCase();
    if (platformWihteList.indexOf(p) !== -1) {
      return true;
    }
    return false;
  });

  if (platforms.length === 0) {
    console.log('');
    console.warn('The options.platforms is no available platform!');
    console.warn('Accept platform list:', JSON.stringify(platformWihteList));
    console.log('');
    return config;
  }

  var multiplePlatformConfigs = [];
  var entry = config.entry;

  if (Array.isArray(entry) || typeof entry === 'string') {
    // TODO: support entry pass array/string ?
  } else if ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) === 'object') {
    var entries = Object.keys(entry);

    platforms.forEach(function (platform) {
      var platformType = platform.toLowerCase();
      var platformConfig = (0, _lodash2.default)(config);
      var platformEntry = {};
      var nameQuery = '';
      // append platform entry
      entries.forEach(function (name) {
        if (Array.isArray(entry[name])) {
          platformEntry[name + '.' + platformType] = entry[name].map(function (ev) {
            return '' + ev;
          });
        } else if (typeof entry[name] === 'string') {
          platformEntry[name + '.' + platformType] = '' + entry[name];
        }
      });

      platformConfig.entry = platformEntry;
      platformConfig.name = platformType;

      // support chunkFilename config according to platformType
      if (typeof options.chunkFilename === 'function') {
        platformConfig.output.chunkFilename = options.chunkFilename(platformType);
      }

      if (Array.isArray(options.name)) {
        options.name.map(function (name) {
          nameQuery += '&name[]=' + name;
        });
      }

      if (Array.isArray(platformConfig.module.preLoaders)) {
        platformConfig.module.preLoaders.push({
          test: /\.jsx?$/,
          exclude: options.exclude ? options.exclude : /(node_modules|bower_components)/,
          loader: platformLoader + '?platform=' + platformType + nameQuery
        });
      } else if (typeof platformConfig.module.preLoaders === 'undefined') {
        platformConfig.module.preLoaders = [{
          test: /\.jsx?$/,
          exclude: options.exclude ? options.exclude : /(node_modules|bower_components)/,
          loader: platformLoader + '?platform=' + platformType + nameQuery
        }];
      }

      multiplePlatformConfigs.push(platformConfig);
    });
  }

  multiplePlatformConfigs.unshift(config);

  return multiplePlatformConfigs;
};