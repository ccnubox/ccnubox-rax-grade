'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webpackSources = require('webpack-sources');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CustomUmdMainTemplatePlugin = function () {
  function CustomUmdMainTemplatePlugin(options) {
    _classCallCheck(this, CustomUmdMainTemplatePlugin);

    this.name = '[name]';
    this.options = options;
  }

  _createClass(CustomUmdMainTemplatePlugin, [{
    key: 'apply',
    value: function apply(compilation) {
      var _this = this;

      var mainTemplate = compilation.mainTemplate;

      compilation.templatesPlugin('render-with-entry', function (source, chunk, hash) {
        var requireCall = '';
        var polyfills = [];
        var name = mainTemplate.applyPluginsWaterfall('asset-path', _this.name, {
          hash: hash,
          chunk: chunk
        });

        if (_this.options.includePolyfills) {
          var polyfillModules = _this.options.polyfillModules;
          polyfills = polyfillModules.map(function (fp) {
            return _fs2.default.readFileSync(fp, 'utf8');
          });
        }

        var moduleName = _this.options.moduleName || name;
        var globalName = _this.options.globalName || name;
        var target = _this.options.target;
        var sourcePrefix = '';
        var sourceSuffix = '';

        if (typeof _this.options.sourcePrefix === 'function' && typeof _this.options.sourceSuffix === 'function') {
          sourcePrefix = _this.options.sourcePrefix(source, chunk, hash);
          sourceSuffix = _this.options.sourceSuffix(source, chunk, hash);
        } else {
          // module, function is private, only use in rax internal
          if (chunk.name.endsWith('.module') || target === 'module') {
            sourcePrefix = 'module.exports = ';
            sourceSuffix = ';';
          } else if (chunk.name.endsWith('.function') || target === 'function') {
            sourcePrefix = 'module.exports = function() {\n  return ';
            sourceSuffix = '};';
          } else if (chunk.name.endsWith('.bundle') || target === 'bundle') {
            // Build page bundle use this mode.
            if (_this.options.bundle === 'compatible') {
              sourcePrefix = 'define("' + chunk.name + '", function(require) {';
              sourceSuffix = '}); require("' + chunk.name + '");';
            } else {
              sourcePrefix = '';
              sourceSuffix = '';
            }
          } else if (chunk.name.endsWith('.factory') || target === 'factory') {
            // Build weex builtin modules use this mode.
            // NOTE: globals should sync logic in weex-rax-framework
            if (_this.options.factoryGlobals) {
              var globalsCodes = _this.options.factoryGlobals.map(function (name) {
                return 'var ' + name + ' = this["' + name + '"];';
              });
              sourcePrefix = 'module.exports = function(require, exports, module) {\n  ' + globalsCodes.join('\n') + '\n  module.exports = ';
              sourceSuffix = '};';
            } else {
              sourcePrefix = 'module.exports = function(require, exports, module) {\n  with(this) { module.exports = ';
              sourceSuffix = '}};';
            }
          } else if (chunk.name.endsWith('.cmd') || target === 'cmd') {
            sourcePrefix = 'define(' + JSON.stringify(moduleName) + ', function(require, exports, module){\n  module.exports = ';
            sourceSuffix = '});';
          } else if (chunk.name.endsWith('.umd') || target === 'umd') {
            // CommonJS first that could rename module name by wrap another define in air
            sourcePrefix = '\n  ;(function(fn) {\n    if (typeof exports === "object" && typeof module !== "undefined") {\n      module.exports = fn();\n    } else if (typeof define === "function") {\n      define(' + JSON.stringify(moduleName) + ', function(require, exports, module){\n        module.exports = fn();\n      });\n    } else {\n      var root;\n      if (typeof window !== "undefined") {\n        root = window;\n      } else if (typeof self !== "undefined") {\n        root = self;\n      } else if (typeof global !== "undefined") {\n        root = global;\n      } else {\n        // NOTICE: In JavaScript strict mode, this is null\n        root = this;\n      }\n      root["' + globalName + '"] = fn();\n    }\n  })(function(){\n    return ';

            sourceSuffix = '});';
          }
        }

        return new _webpackSources.ConcatSource(polyfills.join('\n'), sourcePrefix, source, sourceSuffix, requireCall);
      });

      mainTemplate.plugin('global-hash-paths', function (paths) {
        if (_this.name) paths = paths.concat(_this.name);
        return paths;
      });

      mainTemplate.plugin('hash', function (hash) {
        hash.update('custom-umd');
        hash.update(String(_this.name));
      });
    }
  }]);

  return CustomUmdMainTemplatePlugin;
}();

exports.default = CustomUmdMainTemplatePlugin;
module.exports = exports['default'];