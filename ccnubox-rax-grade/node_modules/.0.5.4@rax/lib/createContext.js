'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createContext;

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

var _proptypes = require('./proptypes');

var _proptypes2 = _interopRequireDefault(_proptypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ValueEmitter = function () {
  function ValueEmitter(defaultValue) {
    _classCallCheck(this, ValueEmitter);

    this.handlers = [];
    this.value = defaultValue;
  }

  _createClass(ValueEmitter, [{
    key: 'on',
    value: function on(handler) {
      this.handlers.push(handler);
    }
  }, {
    key: 'off',
    value: function off(handler) {
      this.handlers = this.handlers.filter(function (h) {
        return h !== handler;
      });
    }
  }, {
    key: 'emit',
    value: function emit(value) {
      this.value = value;
      this.handlers.forEach(function (handler) {
        return handler(value);
      });
    }
  }]);

  return ValueEmitter;
}();

var uniqueId = 0;

function createContext(defaultValue) {
  var contextProp = '__context_' + uniqueId++ + '__';

  var Provider = function (_Component) {
    _inherits(Provider, _Component);

    function Provider() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Provider);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Provider.__proto__ || Object.getPrototypeOf(Provider)).call.apply(_ref, [this].concat(args))), _this), _this.emitter = new ValueEmitter(defaultValue), _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Provider, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return _defineProperty({}, contextProp, this.emitter);
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        if (this.props.value !== undefined) {
          this.emitter.value = this.props.value;
        }
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          this.emitter.emit(nextProps.value);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return this.props.children;
      }
    }]);

    return Provider;
  }(_component2.default);

  Provider.childContextTypes = _defineProperty({}, contextProp, _proptypes2.default.object);

  var Consumer = function (_Component2) {
    _inherits(Consumer, _Component2);

    function Consumer() {
      var _ref3;

      var _temp2, _this2, _ret2;

      _classCallCheck(this, Consumer);

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref3 = Consumer.__proto__ || Object.getPrototypeOf(Consumer)).call.apply(_ref3, [this].concat(args))), _this2), _this2.state = {
        value: _this2.context[contextProp] ? _this2.context[contextProp].value : defaultValue
      }, _this2.onUpdate = function (value) {
        return _this2.setState({ value: value });
      }, _temp2), _possibleConstructorReturn(_this2, _ret2);
    }

    _createClass(Consumer, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var children = this.props.children;
        var consumer = Array.isArray(children) ? children[0] : children;
        if (typeof consumer === 'function') {
          return consumer(this.state.value);
        }
      }
    }]);

    return Consumer;
  }(_component2.default);

  Consumer.contextTypes = _defineProperty({}, contextProp, _proptypes2.default.object);


  return {
    Provider: Provider,
    Consumer: Consumer
  };
}
module.exports = exports['default'];