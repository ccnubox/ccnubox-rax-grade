'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = inject;

var _universalEnv = require('universal-env');

var _host = require('./vdom/host');

var _host2 = _interopRequireDefault(_host);

var _empty = require('./vdom/empty');

var _empty2 = _interopRequireDefault(_empty);

var _native = require('./vdom/native');

var _native2 = _interopRequireDefault(_native);

var _text = require('./vdom/text');

var _text2 = _interopRequireDefault(_text);

var _composite = require('./vdom/composite');

var _composite2 = _interopRequireDefault(_composite);

var _fragment = require('./vdom/fragment');

var _fragment2 = _interopRequireDefault(_fragment);

var _driverWeex = require('driver-weex');

var _driverWeex2 = _interopRequireDefault(_driverWeex);

var _driverBrowser = require('driver-browser');

var _driverBrowser2 = _interopRequireDefault(_driverBrowser);

var _hook = require('./debug/hook');

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function inject(_ref) {
  var driver = _ref.driver,
      hook = _ref.hook,
      measurer = _ref.measurer,
      deviceWidth = _ref.deviceWidth,
      viewportWidth = _ref.viewportWidth,
      eventRegistry = _ref.eventRegistry,
      bodyType = _ref.bodyType,
      bodyProps = _ref.bodyProps;

  // Inject component class
  _host2.default.EmptyComponent = _empty2.default;
  _host2.default.NativeComponent = _native2.default;
  _host2.default.TextComponent = _text2.default;
  _host2.default.FragmentComponent = _fragment2.default;
  _host2.default.CompositeComponent = _composite2.default;

  // Inject devtool hook
  _host2.default.hook = hook || _hook2.default;

  // Inject performance measurer
  _host2.default.measurer = measurer;

  // Inject render driver
  if (!_host2.default.driver) {
    if (!driver) {
      if (_universalEnv.isWeex) {
        driver = _driverWeex2.default;
      } else if (_universalEnv.isWeb) {
        driver = _driverBrowser2.default;
      } else {
        throw Error('No builtin driver matched');
      }
    }
    _host2.default.driver = driver;
  }

  if (deviceWidth && _host2.default.driver.setDeviceWidth) {
    _host2.default.driver.setDeviceWidth(deviceWidth);
  }

  if (viewportWidth && _host2.default.driver.setViewportWidth) {
    _host2.default.driver.setViewportWidth(viewportWidth);
  }

  if (eventRegistry) {
    _host2.default.driver.eventRegistry = eventRegistry;
  }

  // Body custom type only works in weex
  if (bodyType) {
    _host2.default.driver.bodyType = bodyType;
  }

  if (bodyProps) {
    _host2.default.driver.bodyProps = bodyProps;
  }
}
module.exports = exports['default'];