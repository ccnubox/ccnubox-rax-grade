'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderToString;

var _driverServer = require('driver-server');

var _driverServer2 = _interopRequireDefault(_driverServer);

var _host = require('../vdom/host');

var _host2 = _interopRequireDefault(_host);

var _render = require('../render');

var _render2 = _interopRequireDefault(_render);

var _serializer = require('./serializer');

var _serializer2 = _interopRequireDefault(_serializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RENDERED_NAME = 'data-rendered';
var CACHE_KEY_NAME = 'data-cache-key';

/**
 * Add renered mark to element
 */
function addRenderedMark(element, markedValue) {
  if (!element || !element.attributes) {
    return element;
  }

  element.attributes[RENDERED_NAME] = markedValue;
  return element;
}

function renderToString(element) {
  // Reset driver iternal state
  _driverServer2.default.nodeMaps = {};

  // Reset host state
  _host2.default.rootComponents = {};
  _host2.default.rootInstances = {};
  _host2.default.mountID = 1;

  var body = _driverServer2.default.createBody();
  (0, _render2.default)(element, body, {
    driver: _driverServer2.default
  });

  // Add rendered mark to root ChildNodes
  if (body.childNodes) {
    for (var i = 0; i < body.childNodes.length; i++) {
      body.childNodes[i] = addRenderedMark(body.childNodes[i], 'server');
    }
  }

  var markup = new _serializer2.default(body).serialize() || '';

  return markup;
}
module.exports = exports['default'];